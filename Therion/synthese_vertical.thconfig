encoding  utf-8
#encoding  utf-8


# Copyright (C) 2006 Roman Muñoz <tatel@euskalnet.net> Martin Gerbaux <martin.gerbaux@wanadoo.fr>
# This work is under the GPLv2

#
# 

# INTRO

# Dans cet fichier on met les specifications generaux;
# dans quel fichier sont les donees topo, l'air qu'on veut
# donner aux topos imprimees (layout) et qu'est ce qu'on 
# veut comme resultat: map, ou atlas ou 3D
# ou donnees en format SQL

# Alors, on peut fractioner ce fichier en trois parts:
# source, pour specifier les fichier ou sont les donnees topo/dessin
# layout, pour specifier la composition du document a imprimer
# export: map, atlas, etc



# 1-SOURCES 
# La ligne source specifie le fichier ou sont les donnees topo
# par example "nomducavite.th" 

# (Au fichier "nomducavite.th" il faudra avoir une ligne 
# "input "nomducavite.th2" pour specifier le fichier ou se trouvent
# les donnees du dessin, comme ça, cet fichier thconfig appelera 
# "nomducavite.th" et. a leur tour, "nomducavite.th" appelera
# "nomducavite.th2)






source synthese.th
select synthese -recursive off  
#input synthese.th2

# 2-LAYOUT
# Ici, on peut specifier des choses comme les simboles
# a utiliser (UIS, etc) ou imprimer des explications des
# symboles

layout xviexport

	# echele auquel on veut faire la topo
	scale 1 500


	  grid-size 10 10 10 m
	  grid bottom
endlayout



layout normal
  
  # La ligne base-scale specifie l'echelle auquel nous avons
  # dessine nos croquis. Par defaut, therion pense que c'est
  # une echelle 1:200. Si on a utilise une autre echelle, 
  # il faudrait enlever le "#" et especifier l'echelle vraiment 
  # employee, comme c'est le cas apres avoir dessine la topo
  # sur un cheminement exporte avec le layout "xviexport"
  # (voir en bas)
  base-scale 1 200

  # Maitenant on va mettre une ligne "scale" pour specifier l'echelle
  # pour imprimer la topo. La combination entre scale et base-scale
  # controlle le gros des lignes, rotulation, etc, convenable
  # pour faire l'ampliation-reduction entre dessin et
  # le resultat de l'imprimante

  # C'est tres important s'assurer que la configuration de
  # l'imprimante ne specifie pas aucune option "Fit in page"
  # ou similaire, si non, l'echelle sera change pendant
  # impression!
  scale 1 1000

code metapost
fonts_setup(12,16,20,28,40)
endcode



  # Voici une ligne por specifier qu'il faut imprimer une grille
  # au dessous de la topo
  grid bottom

  # Une ligne pour specifier que la grille est 10x10x10 metres
  # (Trois dimensions, oui, ça sert pour la coupe aussi)
  grid-size 100 100 100 m

  # La symbologie: UIS, ASF (Australie) CCNP (Etats Units) ou
  # SKB (txekoslovakia) 
  #symbol-set UIS

  # un couleur de fond, 85% blanc = 15% noir
  #color map-bg 90
  
#couleur des galeries
	color map-fg [100 100 80]
 	#color map-fg altitude
	#color labels on
	opacity 70	# ça marche seulement si transparency est "on" 90% blanc= 10% noir
  	transparency on	#la topo est transparent (on peut voir les galleries sousjacentes) C'est on par defaut, doc, pas vraiment besoin de specifier

  



# Auteur 
  doc-author "Martin Gerbaux"

  # Titule
 	doc-title "Réseau du Clot d'Aspres (synthèse partielle)"
	map-comment "Réseau du Clot d'Aspres, Villard de Lans, Vercors"

# Position de la legnde sur la topo
  # les cordonnes du point de la topo ou l'on veut la manchette:
  # 0 0, c'est en bas, a gauche, 100 100, c'est en haut, a droite
  # La manchette a des "points cardinaux" autour: n, s, ne, sw, etc.
  map-header 0 100 nw

	map-header-bg on

  # Nous voulons une legende pour expliquer les symboles.
	legend on

  # Par defaut, la legende est 14 cm ampleur
  legend-width 30 cm

  # Il faut s'exprimer a la langue de Voltaire...
  language fr

  # echelle graphique 50 m ampleur
  scale-bar 100 m

	#gisement UTM
	rotate 1.82
	

	#statistics explo off
	#statistics topo-length off
	#statistics copyright 2

  # "size", c'est pour l'atlas. Ce sont las dimensions du carre dont
  # l'interiur sera ocuppe par la partie de la topo correspondant a
  # chaque une des pagines. 15 x 20, ça va bien pour imprimer A4.
  size 15 20 cm

  # Au atlas, on va superposer 1cm de chaque page voisine
  overlap 1 cm

  # "page-setup", ca sert pour le map et pour l'atlas aussi.
  # on specifie les dimensions de la feuille papier: 21 X 29,7 (A4)
  # la surface imprimible du papier, ce sont 17 X 28,2
  # Alors, on peut indiquer un marge a gauche de 3 (21-17-1=3)
  # et un marge en haut de 1,5 (29,7-27,2-1=1,5)
  # en centimetres

	  page-setup 29.7 21 27.7 19 1 1 cm
  size 26.7 18 cm
  overlap 1 cm
  code tex-atlas
    \def\dopage{\box\mapbox}
    \insertmaps




#fleche du Nord
  code metapost
	

	  def s_northarrow (expr rot) =
	    begingroup
	      interim defaultscale:=0.5; % scale your north arrow here
	      T:=identity scaled defaultscale rotated 0;   
	      pickup pencircle scaled (0.08cm * defaultscale);
	      thdraw (-.4cm,-1.4cm)--(0,2.8cm)--(.4cm,-1.4cm)--cycle;
	      p:=fullcircle scaled 1.6cm;
	      thclean p; thdraw p;
	      p:=(0.95cm,0)--(0.65cm,0);
	      thdraw p; thdraw p xscaled -1;
	      pickup pencircle scaled (0.12cm * defaultscale);
	      p:=(0.28cm,0.42cm);
	      thdraw p--(p yscaled -1)--(p xscaled -1)--(p scaled -1);
	    endgroup;
	  enddef;


	endcode
 
#barre d'echelle
 
code metapost
  def s_scalebar (expr l, units, txt) =
    begingroup
      interim warningcheck:=0;
      tmpl:=l / Scale * cm * units / 2;
      tmpx:=l / Scale * cm * units / 5;
      tmph:=5bp; % bar height
    endgroup;
    pickup PenC;
    draw (-tmpl,0)--(tmpl,0)--(tmpl,-tmph)--(-tmpl,-tmph)--cycle;
    p:=(0,0)--(tmpx,0)--(tmpx,-tmph)--(0,-tmph)--cycle;
    for i:=-2.5 step 2 until 2:
      fill p shifted (i * tmpx,0);
    endfor;
    begingroup
      interim labeloffset:=3.5bp;
      for i:=0 step (l/5) until (l-1):
        tmpx:=tmpl * (i * 2 / l - 1);
        label.top(thTEX(decimal (i)),(tmpx,0));
      endfor;
      label.top(thTEX(decimal (l) & "\thinspace" & txt),(tmpl,0));
      label.bot(thTEX("\'Echelle = 1 : " & decimal round(Scale*100)),(0,-tmph));
    endgroup;
  enddef;

endcode





  code metapost
    def a_water (expr p) =
      T:=identity;
      thfill p withcolor (0.0, 0.4, 1);
    enddef;
  endcode

  code metapost
    def a_sump (expr p) =
      T:=identity;
      thfill p withcolor (0.0, 0.0, 0.6);
    enddef;
  endcode
  
  #page-setup 21 29.7 17 27.2 3 1.5 cm






#code tex-map

#     \cavelength{1330\thinspace{}m} 
#+ 150\thinspace{}m estimés}
#     \cavedepth{243\thinspace{}m}
#   endcode



# dessin ou pas du cheminement topo
symbol-hide point station        
symbol-hide line survey









# taille des blocs
code metapost
  


#sable
def a_sands (expr p) =
    T:=identity;
    pickup PenC;
    path q; q = bbox p;
    picture tmp_pic;
    tmp_pic := image(
      for i = xpart llcorner q step 0.1u until xpart urcorner q:
        for j = ypart llcorner q step 0.1u until ypart urcorner q:
          draw origin shifted ((i,j) randomized 0.1u) withpen PenC;
        endfor;
      endfor;
    );
    #clip tmp_pic to p;
    draw tmp_pic;
  enddef;

#pebbles
def a_pebbles_SKBB (expr p) =
  T:=identity;
  pickup PenC;
  path q, qq; q = bbox p;
  picture tmp_pic; 
  tmp_pic := image(
    for i = xpart llcorner q step .1u until xpart urcorner q:
      for j = ypart llcorner q step .5u until ypart urcorner q:
        qq := (superellipse((.07u,0),(0,.03u),(-.07u,0),(0,.-.03u),.75))
%             randomized (u/25)
             rotated uniformdeviate(360) 
             shifted ((i,j) randomized 0.27u);
	if xpart (p intersectiontimes qq) < 0:
	  thdraw qq;
	fi;
      endfor;  
    endfor;
  );
  clip tmp_pic to p;
  draw tmp_pic;
enddef;





#pente
   def l_slope (expr P,S)(text Q) = 
 %show Q;
T:=identity;
numeric dirs[];
numeric lengths[];
for i=Q:
  dirs[redpart i]:=greenpart i;
  lengths[redpart i]:=bluepart i;
endfor;  
li:=length(P); % last
alw_perpendicular:=true;
for i=0 upto li:
  if unknown dirs[i]: dirs[i]:=-1; 
  else: 
    if dirs[i]>-1:
      dirs[i]:=((90-dirs[i]) - angle(thdir(P,i))) mod 360; 
      alw_perpendicular:=false;
    fi;
  fi;
  if unknown lengths[i]: lengths[i]:=-1; fi;
endfor;
  %for i=0 upto li: show dirs[i]; endfor;
ni:=0; % next
pi:=0; % previous
for i=0 upto li:
  d:=dirs[i];
  if d=-1:
    if (i=0) or (i=li):
      dirs[i] := angle(thdir(P,i) rotated 90) mod 360;
pi:=i;
    else:
      if ni<=i:
  for j=i upto li:
          ni:=j;
    exitif dirs[j]>-1;
  endfor;
fi;
w:=arclength(subpath(pi,i) of P) / 
   arclength(subpath(pi,ni) of P);
dirs[i]:=w[dirs[pi],dirs[ni]];
   %        if (dirs[i]-angle(thdir(P,i))) mod 360>180:
   %          dirs[i]:=w[dirs[ni],dirs[pi]];
   %	  message("*******");
   %        fi;
   fi;
  else:
    pi:=i;
  fi;
endfor;
  %for i=0 upto li: show dirs[i]; endfor;
ni:=0; % next
pi:=0; % previous
for i=0 upto li:
  l:=lengths[i];
  if l=-1:
    if (i=0) or (i=li):
      lengths[i] := 1cm; % should never happen!
thwarning("slope width at the end point not specified");
pi:=i;
    else:
      if ni<=i:
  for j=i+1 upto li:
          ni:=j;
    exitif lengths[j]>-1;
  endfor;  
fi;
w:=arclength(subpath(pi,i) of P) /   
   arclength(subpath(pi,ni) of P);
lengths[i]:=w[lengths[pi],lengths[ni]];
pi:=i;
    fi;
  else:
    pi:=i;
  fi;
endfor;
  % for i=0 upto li: show lengths[i]; endfor;
T:=identity;
boolean par;
cas := 0.3u;
krok := 0.7u;
dlzka := (arclength P);
if dlzka>3u: dlzka:=dlzka-0.6u fi;
mojkrok:=adjust_step(dlzka,1.4u) / 5;
pickup PenD;
par := false; 
forever:
  t := arctime cas of P;
  if t mod 1>0:  % not a key point
    w := (arclength(subpath(floor t,t) of P) / 
          arclength(subpath(floor t,ceiling t) of P));
    if alw_perpendicular:
      a := 90;
    else:
      a := w[dirs[floor t],dirs[ceiling t]];
    fi;
    l := w[lengths[floor t],lengths[ceiling t]];
  else:
    if alw_perpendicular:
      a := 90;
    else:
      a:= dirs[t];
    fi; 
    l:=lengths[t];
  fi;    
  a := a + angle(thdir(P,t));    
  thdraw (point t of P) -- 
    ((point t of P) + if par: 0.333 * fi l * unitvector(dir(a)));
  cas := cas + mojkrok;
  par := not par;
  exitif cas > dlzka + .3u + (krok / 3);  % for rounding errors
endfor;
if S = 1: pickup PenC; draw P fi;
   %pickup pencircle scaled 3pt;
   %for i=0 upto li: draw point i of P; endfor;
  enddef; 


   


endcode





















endlayout
















# Voici les lignes pour exporter le cheminement au format xvi
export map -proj plan -fmt xvi -layout xviexport -o synthese_plan.xvi
export map -proj extended -fmt xvi -layout xviexport -o synthese_coupe.xvi
##############################################################################

export map -proj plan -fmt pdf -layout normal -o synthese_plan_vertical.pdf
#export map -proj extended -fmt pdf -layout xviexport -o synthese_coupe.pdf
